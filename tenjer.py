#!/usr/bin/env python2
# -*- coding: euc-jp -*-
###
###  tenjer.py
###
###  Copyright (c) 2011  Yusuke Shinyama <yusuke at cs dot nyu dot edu>
###
###  Permission is hereby granted, free of charge, to any person
###  obtaining a copy of this software and associated documentation
###  files (the "Software"), to deal in the Software without
###  restriction, including without limitation the rights to use,
###  copy, modify, merge, publish, distribute, sublicense, and/or
###  sell copies of the Software, and to permit persons to whom the
###  Software is furnished to do so, subject to the following
###  conditions:
###
###  The above copyright notice and this permission notice shall be
###  included in all copies or substantial portions of the Software.
###  
###  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
###  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
###  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
###  PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
###  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
###  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
###  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
###  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
### 

import sys, re, os.path
from struct import pack, unpack
from array import array


##  utilities
##
def cdbhash(s, n=5381L):
    return reduce(lambda h,c: ((h*33) ^ ord(c)) & 0xffffffffL, s, n)

if pack('=i',1) == pack('>i',1):
    # big endian
    def decode(x):
        a = array('I', x)
        a.byteswap()
        return a
    def encode(a):
        a.byteswap()
        return a.tostring()
else:
    # little endian
    def decode(x):
        a = array('I', x)
        return a
    def encode(a):
        return a.tostring()

HIRA2KATA = dict( (c, c+96) for c in xrange(0x3041,0x3094) )
def hira2kata(s):
    return s.translate(HIRA2KATA)

FULLWIDTH = u"¡¡¡ª¡É¡ô¡ð¡ó¡õ¡Ç¡Ê¡Ë¡ö¡Ü¡¤\uff0d\u2212¡¥¡¿£°£±£²£³£´£µ£¶£·£¸£¹¡§¡¨¡ã¡á¡ä¡©" \
            u"¡÷£Á£Â£Ã£Ä£Å£Æ£Ç£È£É£Ê£Ë£Ì£Í£Î£Ï£Ð£Ñ£Ò£Ó£Ô£Õ£Ö£×£Ø£Ù£Ú¡Î¡À¡Ï¡°¡²" \
            u"¡Æ£á£â£ã£ä£å£æ£ç£è£é£ê£ë£ì£í£î£ï£ð£ñ£ò£ó£ô£õ£ö£÷£ø£ù£ú¡Ð¡Ã¡Ñ"
HALFWIDTH = u" !\"#$%&'()*+,--./0123456789:;<=>?" \
            u"@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_" \
            u"`abcdefghijklmnopqrstuvwxyz{|}"
Z2HMAP = dict( (ord(zc), ord(hc)) for (zc,hc) in zip(FULLWIDTH, HALFWIDTH) )
def zen2han(s):
  return s.translate(Z2HMAP)

def decode_yomi(s):
    return u''.join( unichr(0x3000+ord(c)) for c in s )

POST = { ord(u'¤Ï'):u'¤ï', ord(u'¤Ø'):u'¤¨' }
EUPH = re.compile(ur'([¥ª¥³¥´¥½¥¾¥È¥É¥Î¥Û¥Ü¥Ý¥â¥è¥í¥ç¥©])¥¦')
def reg_yomi(s):
    s = s[:-1]+(s[-1].translate(POST))
    s = hira2kata(s)
    s = EUPH.sub(ur'\1¡¼', s)
    return s


##  CDB
##
class CDBReader(object):

    def __init__(self, cdbname, codec):
        self.name = cdbname
        self.codec = codec
        self._fp = file(cdbname, 'rb')
        hash0 = decode(self._fp.read(2048))
        self._hash0 = [ (hash0[i], hash0[i+1]) for i in xrange(0, 512, 2) ]
        self._hash1 = [ None ] * 256
        (self._eod,_) = self._hash0[0]
        return

    def __repr__(self):
        return '<CDBReader: %r>' % self.name

    def __getstate__(self):
        raise TypeError

    def __setstate__(self, dict):
        raise TypeError

    def __getitem__(self, k):
        k = k.encode(self.codec, 'ignore')
        h = cdbhash(k)
        h1 = h & 0xff
        (pos_bucket, ncells) = self._hash0[h1]
        if ncells == 0: raise KeyError(k)
        hs = self._hash1[h1]
        if hs == None:
            self._fp.seek(pos_bucket)
            hs = decode(self._fp.read(ncells * 8))
            self._hash1[h1] = hs
        i = ((h >> 8) % ncells) * 2
        n = ncells*2
        for _ in xrange(ncells):
            p1 = hs[i+1]
            if p1 == 0: raise KeyError(k)
            if hs[i] == h:
                self._fp.seek(p1)
                self._lastpos = self._fp.tell()
                (klen, vlen) = unpack('<II', self._fp.read(8))
                k1 = self._fp.read(klen)
                if k1 == k:
                    v1 = self._fp.read(vlen)
                    return v1
            i = (i+2) % n
        raise KeyError(k)

    def close(self):
        self._fp.close()
        return

    def get(self, k, failed=None):
        try:
            return self.__getitem__(k)
        except KeyError:
            return failed

    def has_key(self, k):
        try:
            self.__getitem__(k)
            return True
        except KeyError:
            return False

    def __contains__(self, k):
        return self.has_key(k)


##  TCDB
##
class TCDBReader(CDBReader):

    def lookup(self, seq, parent=0L):
        r = []
        for k in seq:
            (v, parent) = self.lookup1(k, parent)
            r.append(v)
        return r

    def lookup1(self, k, parent=0L):
        k = k.encode(self.codec, 'ignore')
        h = cdbhash(k, parent+5381L)
        self._fp.seek((h % 256) << 3)
        (pos_bucket, ncells) = unpack('<II', self._fp.read(8))
        if ncells == 0: raise KeyError(k)
        start = (h >> 8) % ncells
        for i in xrange(ncells):
            self._fp.seek(pos_bucket + ((start+i) % ncells << 3))
            (h1, p1) = unpack('<II', self._fp.read(8))
            if p1 == 0: raise KeyError(k)
            if h1 == h:
                self._fp.seek(p1)
                (klen, vlen) = unpack('<II', self._fp.read(8))
                k1 = self._fp.read(klen)
                if k1 == k:
                    v1 = self._fp.read(vlen)
                    return (v1,p1)
        raise KeyError(k)


##  Wakacher
##
class Wakacher(object):

    KIND = {}
    for (i1,i2,k) in (
        (0x0040, 0x005a, 1), # latin
        (0x0060, 0x007a, 1),
        (0xff21, 0xff3a, 1),
        (0xff41, 0xff5a, 1),
        (0x3041, 0x3093, 2), # hira
        (0x30a1, 0x30f4, 3), # kata
        (0x30fc, 0x30fc, 3), # kata
        (0xff66, 0xff9f, 3),
        (0x3005, 0x3007, 4), # kanji
        (0x4e00, 0x9fff, 4), # kanji
        (0x0030, 0x0039, 5), # digit
        (0x002e, 0x002e, 5),
        (0xff10, 0xff19, 5),
        ):
        for i in xrange(i1,i2+1):
            KIND[unichr(i)] = k
    for c in u'"([¡Ò¡Ô¡Ö¡Ø¡Ú¡Ì¡È¡Ê¡Î\uff62':
        KIND[c] = 6
    #for c in u')]¡Ó¡Õ¡×¡Ù¡Û¡Í¡Ë\¡Ïuff63':
    #    KIND[c] = 7

    PREFIX1 = set(
        [u'¤ª'
         ])

    POST1 = {
        u'¤ò': u'',
        u'¤¬': u'¤Ã¤ó¤é¤ê¤ë¤ì¤í',
        u'¤Ï': u'',
        u'¤Ç': u'¤¢¤­¤µ¤·¤¹¤Ï¤â¤Î',
        u'¤Ë': u'¤Ï¤â',
        # u'¤â',u'¤È',u'¤«'
        u'¤Î': u'¤ò¤¬¤Ï¤Ç¤Ë¤À¤â',
        }

    ADV1 = set(
        [u'°Æ³°', u'°ÊÍè', u'°ÍÁ³', u'°ì±þ', u'°ìÀÚ', u'°ì½Ö', u'°ìÂ­', u'°ìÈÕ',
         u'°ìÎ§', u'³Æ¼«', u'±ä¡¹', u'²¿¸Î', u'²¿Â´', u'²äÁ³', u'³§ÌÜ', u'µÞî±',
         u'¶ËÎÏ', u'¶á¡¹', u'º£¹¹', u'ºÇÁá', u'»êµÞ', u'»ê¶Ë', u'»þ¡¹', u'½ç¼¡',
         u'½êÁ§', u'¿ïÊ¬', u'ÀÞ³Ñ', u'Á´Á³', u'ÁáÂ®', u'Â¿Ê¬', u'ÂçÄñ', u'ÂçÊÑ',
         u'ÂçÊý', u'Âô»³', u'Ãà°ì', u'ÃúÅÙ', u'ÅöÁ³', u'ÅþÄì', u'ÆÍÇ¡', u'ÊÌÃÊ',
         u'ËÜÍè', u'Ëü°ì', u'ÌµÏÀ', u'ÌÓÆ¬', u'ÌÞÏÀ', u'°ÊÁ°', u'°Ê¸å', u'°ÊÍè',
         u'°Ê¾å', u'°Ê¹ß', u'ºòÆü', u'ºòÇ¯', u'¶áÆü', u'¶áÇ¯', u'¶öÁ³', u'·ë¶É',
         u'·ë¹½', u'¸µÍè', u'¸åÆü', u'º£º¢', u'º£¸å', u'º£²ó', u'º£Æü', u'º£·î',
         u'º£Ç¯', u'º£½µ', u'º£ÅÙ', u'º£ÈÕ', u'º£Ìë', u'ºÆÅÙ', u'ºÇ¶á', u'ºÇ½é',
         u'ºòÆü', u'ºò·î', u'ºòÇ¯', u'ºò½µ', u'ºòÈÕ', u'ºòÌë', u'ÀèÄø', u'Àèº¢',
         u'ÀèÆü', u'Àè·î', u'ÀèÇ¯', u'Àè½µ', u'ÀèÈÕ', u'ÀèÌë', u'Á°²ó', u'Á°·î',
         u'Á´Éô', u'ÅÓÃæ', u'Åö½é', u'ÅöÆü', u'ÅöÊ¬', u'ÅöÌÌ', u'ÆüÃæ', u'Æüº¢',
         u'ÆüÌë', u'Ç¯¡¹', u'Ç¯Ãæ', u'ËÜÆü', u'Ëè²ó', u'Ëè·î', u'Ëè½µ', u'ËèÄ«',
         u'ËèÅÙ', u'ËèÆü', u'ËèÇ¯', u'ËèÈÕ', u'ÌÀÄ«', u'ÌÀÆü', u'ÌÀÈÕ', u'ÌëÊ¬',
         u'Íâ·î', u'ÍâÄ«', u'ÍâÆü', u'ÍâÇ¯', u'Íè·î', u'Íè½µ', u'ÍèÇ¯', u'ÎãÇ¯',
         u'Ï¢Æü',
         ])

    MAXCONTKANJI = 2

    def __init__(self, tcdb):
        self._tcdb = tcdb
        self.reset()
        return
    
    def reset(self):
        self._chunks = []
        self._chunk = u''
        self._parse = self._parse_main
        return

    def feed(self, chars):
        i = 0
        while 0 <= i and i < len(chars):
            c = chars[i]
            k = self.KIND.get(c, 0)
            i = self._parse(c, k, i)
        return

    def get_chunks(self, chars):
        self.reset()
        self.feed(chars)
        self._flush()
        (r, self._chunks) = (self._chunks, [])
        return r
    
    def _flush(self):
        if self._chunk:
            self._chunks.append(self._chunk)
            self._chunk = u''
        return
    
    def _parse_main(self, c, k, i):
        if k == 1:
            self._parse = self._parse_latin
        elif k == 2:
            self._parse = self._parse_tail
        elif k == 3:
            self._parse = self._parse_kata
        elif k == 4:
            self._dstate = 0
            self._parse = self._parse_kanji
        elif k == 5:
            self._parse = self._parse_digit
        elif k == 6:
            self._parse = self._parse_paren
        else:
            self._parse = self._parse_other
        return i

    def _parse_other(self, c, k, i):
        if k == 0:
            self._chunk += c
            return i+1
        self._flush()
        self._parse = self._parse_main
        return i

    def _parse_tail(self, c, k, i):
        if k == 2:
            # ¡Ö¤ª´ê¤¤¡×¤Ê¤É¤Î¡Ö¤ª¡×¤ÏÄ¾Á°¤ÇÀÚ¤ë¡£
            if c in self.PREFIX1:
                self._prechunk = c
                self._parse = self._parse_tailpre
                return i+1
            self._chunk += c
            # ½õ»ì¤¬¤­¤¿¤éÀÚ¤ë¤«¤â¤·¤ì¤Ê¤¤¡£
            if c in self.POST1:
                self._parse = self._parse_tail2
            return i+1
        self._parse = self._parse_other
        return i

    def _parse_tail2(self, c, k, i):
        if k == 2:
            # ½õ»ì¤¬Â³¤¯¾ì¹ç¡£
            c0 = self._chunk[-1]
            if (c0 in self.POST1 and c in self.POST1[c0]):
                self._parse = self._parse_tail
                return i
        # ½õ»ì¤¬½ª¤ï¤Ã¤¿¤Î¤ÇÀÚ¤ë¡£
        self._parse = self._parse_other
        return i

    def _parse_tailpre(self, c, k, i):
        if k == 4:
            # ¡Ö¤ª+´Á»ú¡×¤Ï¡Ö¤ª¡×¤ÎÁ°¤ÇÀÚ¤ë¡£
            self._flush()
            self._chunk += self._prechunk
            self._dstate = 0
            self._parse = self._parse_kanji
            return i
        self._chunk += self._prechunk
        self._parse = self._parse_tail
        return i

    def _parse_latin(self, c, k, i):
        if k == 1 or k == 5:
            self._chunk += c
            return i+1
        self._parse = self._parse_tail
        return i

    def _parse_kata(self, c, k, i):
        if k == 3:
            self._chunk += c
            return i+1
        self._parse = self._parse_tail
        return i
        
    def _parse_kanji(self, c, k, i):
        if k == 4:
            try:
                (_, self._dstate) = self._tcdb.lookup1(c, self._dstate)
            except KeyError:
                self._dstate = 0
                # MAXCONTKANJI Ê¸»ú°Ê¾å¤Î´Á»úÃ±¸ì¤Î¤¢¤È¤ÏÀÚ¤ë¡£
                if self.MAXCONTKANJI <= len(self._chunk):
                    self._parse = self._parse_other
                    return i
            self._chunk += c
            return i+1
        self._parse = self._parse_tail
        return i
    
    def _parse_digit(self, c, k, i):
        if k == 5:
            self._chunk += c
            return i+1
        self._parse = self._parse_main
        return i

    def _parse_paren(self, c, k, i):
        if k == 6:
            self._chunk += c
            return i+1
        self._parse = self._parse_main
        return i


##  Yomer
##
class Yomer(object):

    DIGIT = {
        u'Ç¯': u'¥Í¥ó',
        u'·î': u'¥¬¥Ä',
        u'Æü': u'¥Ë¥Á',
        u'»þ': u'¥¸',
        u'¿Í': u'¥Ë¥ó',
        u'ºÐ': u'¥µ¥¤',
        }

    def __init__(self, tcdb):
        self._tcdb = tcdb
        self.reset()
        return

    def reset(self):
        self._chunks = []
        self._part = u''
        self._yomi = None
        self._dstate = 0
        self._parse = self._parse_main
        return

    def feed(self, chars):
        i = 0
        while 0 <= i and i < len(chars):
            c = chars[i]
            i = self._parse(c, i)
        return

    def get_yomi(self, chars):
        self.reset()
        self.feed(chars)
        self._flush()
        x = u''
        a = []
        for (c,y) in self._chunks:
            if y is None:
                x += c
            else:
                if x:
                    a.append((x, reg_yomi(x)))
                    x = u''
                a.append((y, reg_yomi(y)))
        if x:
            a.append((x, reg_yomi(x)))
        return [a]

    def _flush(self):
        if self._yomi is not None:
            (n,y) = self._yomi
            self._chunks.append((self._part[:n], decode_yomi(y)))
            self._part = self._part[n:]
        if self._part:
            self._chunks.append((self._part, None))
        self._part = u''
        self._yomi = None
        return
    
    def _parse_main(self, c, i):
        self._part += c
        try:
            (v, self._dstate) = self._tcdb.lookup1(c, self._dstate)
            if v:
                self._yomi = (len(self._part), v)
        except KeyError:
            self._dstate = 0
            self._flush()
        return i+1
    
    def _get_yomi(self, s):
        r = []
        i = 0
        (i0,i1,p,y) = (0,0,0L,None)
        while i < len(s):
            c = s[i]
            try:
                (v, p) = self._tcdb.lookup1(c, p)
                i += 1
                if v:
                    (y,i1) = (v,i)
                continue
            except KeyError:
                pass
            if i0 < i1:
                r.append((s[i0:i1], decode_yomi(y)))
                i = i0 = i1
            else:
                r.append((c, None))
                i += 1
                i0 = i1 = i
            (p,y) = (0L,None)
        if y is not None:
            r.append((s[i0:i1], decode_yomi(y)))
        if i1 < len(s):
            r.append((s[i1:], None))
        return [a]


##  Tenjer
##
class Tenjer(object):

    NABCC = [
        (' ','',u' '),
        ('!','2346',u'¥Û'),
        ('"','5',u''),
        ('#','3456',u''),
        ('$','1246',u'¥±'),
        ('%','146',u'¥¯'),
        ('&','12346',u'¥Ø'),
        ("'",'3',u"¥ï'"),
        ('(','12356',u'¥ß'),
        (')','23456',u'¥â'),
        ('*','16',u'¥«'),
        ('+','346',u'¥æ'),
        (',','6',u''),
        ('-','36',u'¡Ö¡×¡Ø¡Ù¡Ú¡Û-'),
        ('.','46',u''),
        ('/','34',u'¥ä'),
        ('0','356',u'¥ó"'),
        ('1','2',u'¥Ã,'),
        ('2','23',u'¥ð;'),
        ('3','25',u'¡¼:'),
        ('4','256',u'¡£.'),
        ('5','26',u'?'),
        ('6','235',u'!'),
        ('7','2356',u'()'),
        ('8','236',u''),
        ('9','35',u'¥ò'),
        (':','156',u'¥µ'),
        (';','56',u'¡¢'),
        ('<','126',u'¥­'),
        ('=','123456',u'¥á'),
        ('>','345',u'¥è'),
        ('?','1456',u'¥¹'),
        ('@','4',u''),
        ('A','1',u'¥¢1A'),
        ('B','12',u'¥¤2B'),
        ('C','14',u'¥¦3C'),
        ('D','145',u'¥ë4D'),
        ('E','15',u'¥é5E'),
        ('F','124',u'¥¨6F'),
        ('G','1245',u'¥ì7G'),
        ('H','125',u'¥ê8H'),
        ('I','24',u'¥ª9I'),
        ('J','245',u'¥í0J'),
        ('K','13',u'¥ÊK'),
        ('L','123',u'¥ËL'),
        ('M','134',u'¥ÌM'),
        ('N','1345',u'¥ÄN'),
        ('O','135',u'¥¿O'),
        ('P','1234',u'¥ÍP'),
        ('Q','12345',u'¥ÆQ'),
        ('R','1235',u'¥ÁR'),
        ('S','234',u'¥ÎS'),
        ('T','2345',u'¥ÈT'),
        ('U','136',u'¥ÏU'),
        ('V','1236',u'¥ÒV'),
        ('W','2456',u'¥½W'),
        ('X','1346',u'¥ÕX'),
        ('Y','13456',u'¥àY'),
        ('Z','1356',u'¥ÞZ'),
        ('[','246',u'¥³'),
        ('\\','1256',u'¥·'),
        (']','12456',u'¥»'),
        ('^','45',u''),
        ('_','456',u''),
        ]

    TABLE = {
        u'¥¦¥¡':'5A', 
        u'¥¦¥£':'5B', 
        u'¥ô':'"C',
        u'¥¦¥§':'5F', u'¥¤¥§':'@F', 
        u'¥¦¥©':'5I', 
        u'¥¬':'"*', u'¥­¥ã':'@*', u'¥®¥ã':'^*', u'¥¯¥¡':'5*', u'¥°¥¡':'4*', 
        u'¥®':'"<', u'¥¯¥£':'5<', 
        u'¥°':'"%', u'¥­¥å':'@%', u'¥®¥å':'^%',
        u'¥²':'"$', u'¥¯¥§':'5$', 
        u'¥´':'"[', u'¥­¥ç':'@[', u'¥®¥ç':'^[', u'¥¯¥©':'5[', 
        u'¥¶':'":', u'¥·¥ã':'@:', u'¥¸¥ã':'^:',
        u'¥¸':'"\\',
        u'¥º':'"?', u'¥·¥å':'@?', u'¥¸¥å':'^?',
        u'¥¼':'"]', u'¥·¥§':'@]',
        u'¥¾':'"W', u'¥·¥ç':'@W', u'¥¸¥ç':'^W',
        u'¥À':'"O', u'¥Á¥ã':'@O', u'¥Â¥ã':'^O', u'¥Ä¥¡':'5O', 
        u'¥Â':'"R', u'¥Ä¥£':'5R', u'¥Æ¥£':'"R', u'¥Ç¥£':'^R',
        u'¥Å':'"N', u'¥Á¥å':'@N', u'¥Â¥å':'^N', u'¥Æ¥å':'.N', u'¥Ç¥å':'_N', u'¥È¥¥':'5N', u'¥É¥¥':'4N', 
        u'¥Ç':'"Q', u'¥Ä¥§':'5Q', u'¥Á¥§':'@Q', u'¥¸¥§':'^Q',
        u'¥É':'"T', u'¥Á¥ç':'@T', u'¥Â¥ç':'^T', u'¥Ä¥©':'5T', 
        u'¥Ë¥ã':'@K',
        u'¥Ë¥å':'@M',
        u'¥Ë¥ç':'@S',
        u'¥Ð':'"U', u'¥Ñ':',U', u'¥Ò¥ã':'@U', u'¥Ó¥ã':'^U', u'¥Ô¥ã':'.U', u'¥Õ¥¡':'5U', u'¥ô¥¡':'4U', 
        u'¥Ó':'"V', u'¥Ô':',V', u'¥Õ¥£':'5V', u'¥ô¥£':'4V', 
        u'¥Ö':'"X', u'¥×':',X', u'¥Ò¥å':'@X', u'¥Ó¥å':'^X', u'¥Ô¥å':'.X', u'¥Õ¥å':'5X', u'¥ô¥å':'_X', 
        u'¥Ù':'"&', u'¥Ú':',&', u'¥Õ¥§':'5&', u'¥ô¥§':'4&', 
        u'¥Ü':'"!', u'¥Ý':',!', u'¥Ò¥ç':'@!', u'¥Ó¥ç':'^!', u'¥Ô¥ç':'.!', u'¥Õ¥©':'5!', u'¥ô¥©':'4!',
        u'¥ß¥ã':'@Z',
        u'¥ß¥å':'@Y',
        u'¥ß¥ç':'@)',
        u'¥ê¥ã':'@E',
        u'¥ê¥å':'@D',
        u'¥ê¥ç':'@J',
        }
    for (b,_,s) in NABCC:
        for c in s:
            TABLE[c] = b
    
    KIND = {}
    for (i1,i2,k) in (
        (0x0040, 0x005a, 1), # latin
        (0x0060, 0x007a, 1),
        (0x002c, 0x002e, 1), 
        (0x003a, 0x003b, 1), 
        (0x30a1, 0x30f4, 3), # kata
        (0x30fc, 0x30fc, 3), # kata
        (0x0030, 0x0039, 5), # digit
        ):
        for i in xrange(i1,i2+1):
            KIND[unichr(i)] = k
    for c in (u'!?"([¡Ò¡Ô¡Ö¡Ø¡Ú¡Ì¡È¡Ê¡Î\uff62'
              u')]¡Ó¡Õ¡×¡Ù¡Û¡Í¡Ë¡Ï\uff63'):
        KIND[c] = 3
    
    def get_brl(self, chars):
        i = 0
        chars = zen2han(chars).upper()
        self._brl = []
        self._parse = self._parse_main
        self._part = None
        while 0 <= i and i < len(chars):
            c = chars[i]
            k = self.KIND.get(c, 0)
            i = self._parse(c, k, i)
        if self._part is not None:
            self._brl.append((self._part, self.TABLE.get(self._part)))
        return self._brl

    def _parse_main(self, c, k, i):
        if k == 1:
            self._brl.append((None,';'))
            self._parse = self._parse_latin
            return i
        elif k == 3:
            self._part = u''
            self._parse = self._parse_kata
            return i
        elif k == 5:
            self._brl.append((None,'#'))
            self._parse = self._parse_digit
            return i
        else:
            return i+1

    def _parse_latin(self, c, k, i):
        if k == 1:
            self._brl.append((c, self.TABLE.get(c)))
            return i+1
        elif k == 3 or k == 5:
            self._brl.append((None, ' '))
        self._parse = self._parse_main
        return i

    def _parse_kata(self, c, k, i):
        if k == 3:
            if (self._part+c) in self.TABLE:
                self._part += c
                return i+1
            self._brl.append((self._part, self.TABLE.get(self._part)))
            self._part = c
            return i+1
        self._brl.append((self._part, self.TABLE.get(self._part)))
        self._part = None
        self._parse = self._parse_main
        return i

    def _parse_digit(self, c, k, i):
        if c == '.':
            self._brl.append((c, '1'))
            return i+1
        elif k == 5:
            self._brl.append((c, self.TABLE.get(c)))
            return i+1
        elif k == 3:
            self._brl.append((None, '_'))
        self._parse = self._parse_main
        return i

# fold
def fold(words, width=40, sep=u' '):
    r = []
    i = 0
    for w in words:
        if r and width < i+len(w):
            yield sep.join(r)
            r = []
            i = 0
        r.append(w)
        i += len(w)
    if r:
        yield sep.join(r)
    return

# main
def main(argv):
    import getopt, fileinput
    def usage():
        print 'usage: %s [-d] [-c codec] [-w width] [-D dictpath] [file ...]' % argv[0]
        return 100
    try:
        (opts, args) = getopt.getopt(argv[1:], 'dw:c:C:D:')
    except getopt.GetoptError:
        return usage()
    debug = 0
    width = 32
    codec = 'utf-8'
    dictcodec = 'euc-jp'
    dictpath = os.path.join(os.path.dirname(__file__), 'tenjer.tcdb')
    for (k, v) in opts:
        if k == '-d': debug += 1
        elif k == '-w': width = int(v)
        elif k == '-c': codec = v
        elif k == '-C': dictcodec = v
        elif k == '-D': dictpath = v
    tcdb = TCDBReader(dictpath, dictcodec)
    tenjer = Tenjer()
    yomer = Yomer(tcdb)
    wakacher = Wakacher(tcdb)
    for line in fileinput.input(args):
        line = line.decode(codec, 'ignore')
        r = []
        for s in wakacher.get_chunks(line):
            for y in yomer.get_yomi(s):
                t = u''.join( v or k for (k,v) in y)
                a = u''
                b = u''
                for (x,y) in tenjer.get_brl(t):
                    a += x or u''
                    b += y or u''
                if debug:
                    print '>', a
                r.append(b)
        for line in fold(r, width=width):
            print line
    return 0

if __name__ == '__main__': sys.exit(main(sys.argv))
